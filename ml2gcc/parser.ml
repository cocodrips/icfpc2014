type token =
  | INT of (int)
  | ID of (string)
  | COMMA
  | SEMI
  | CONS
  | LET
  | IN
  | AND
  | MATCH
  | WITH
  | OR
  | UNDER
  | FUN
  | REC
  | ARROW
  | IF
  | ELSE
  | THEN
  | CAR
  | CDR
  | ATOM
  | MINUS
  | PLUS
  | TIMES
  | DIV
  | AND2
  | OR2
  | NOT
  | GT
  | GTE
  | EQ
  | LT
  | LTE
  | NEQ
  | LLIST
  | RLIST
  | LPAR
  | RPAR
  | EOF
  | UMINUS

open Parsing;;
let _ = parse_error;;
# 2 "parser.mly"
  open Expr
# 48 "parser.ml"
let yytransl_const = [|
  259 (* COMMA *);
  260 (* SEMI *);
  261 (* CONS *);
  262 (* LET *);
  263 (* IN *);
  264 (* AND *);
  265 (* MATCH *);
  266 (* WITH *);
  267 (* OR *);
  268 (* UNDER *);
  269 (* FUN *);
  270 (* REC *);
  271 (* ARROW *);
  272 (* IF *);
  273 (* ELSE *);
  274 (* THEN *);
  275 (* CAR *);
  276 (* CDR *);
  277 (* ATOM *);
  278 (* MINUS *);
  279 (* PLUS *);
  280 (* TIMES *);
  281 (* DIV *);
  282 (* AND2 *);
  283 (* OR2 *);
  284 (* NOT *);
  285 (* GT *);
  286 (* GTE *);
  287 (* EQ *);
  288 (* LT *);
  289 (* LTE *);
  290 (* NEQ *);
  291 (* LLIST *);
  292 (* RLIST *);
  293 (* LPAR *);
  294 (* RPAR *);
    0 (* EOF *);
  295 (* UMINUS *);
    0|]

let yytransl_block = [|
  257 (* INT *);
  258 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\004\000\004\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\001\000\001\000\001\000\001\000\
\001\000\001\000\001\000\001\000\005\000\005\000\005\000\005\000\
\005\000\005\000\006\000\006\000\011\000\011\000\007\000\007\000\
\008\000\008\000\010\000\010\000\009\000\009\000\000\000"

let yylen = "\002\000\
\005\000\003\000\003\000\001\000\001\000\002\000\003\000\001\000\
\001\000\003\000\003\000\001\000\004\000\005\000\003\000\004\000\
\004\000\006\000\003\000\003\000\002\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\002\000\002\000\002\000\002\000\001\000\003\000\001\000\002\000\
\003\000\003\000\004\000\002\000\002\000\003\000\002\000\001\000\
\002\000\001\000\003\000\003\000\003\000\001\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\037\000\039\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\040\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\035\000\000\000\000\000\000\000\000\000\000\000\000\000\047\000\
\000\000\000\000\000\000\041\000\000\000\038\000\042\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\049\000\000\000\000\000\000\000\
\000\000\000\000\005\000\008\000\009\000\000\000\000\000\016\000\
\000\000\000\000\000\000\053\000\000\000\051\000\000\000\043\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\007\000\011\000\000\000\000\000\000\000\003\000\000\000\
\001\000"

let yydgoto = "\002\000\
\031\000\088\000\089\000\100\000\017\000\020\000\023\000\049\000\
\032\000\034\000\052\000"

let yysindex = "\018\000\
\102\255\000\000\000\000\000\000\015\255\102\255\021\255\102\255\
\102\255\102\255\102\255\102\255\102\255\077\255\102\255\216\255\
\031\255\003\255\026\255\028\255\203\255\021\255\054\255\130\002\
\216\255\216\255\216\255\087\255\134\001\000\000\173\255\034\255\
\124\255\042\255\102\255\102\255\102\255\102\255\102\255\102\255\
\102\255\102\255\102\255\102\255\102\255\102\255\102\255\031\255\
\000\000\102\255\041\255\073\255\081\255\102\255\050\255\000\000\
\102\255\102\255\102\255\000\000\102\255\000\000\000\000\216\255\
\142\255\142\255\087\255\087\255\134\001\134\001\216\255\216\255\
\111\255\216\255\216\255\111\255\000\000\216\255\102\255\026\255\
\102\255\216\255\000\000\000\000\000\000\019\255\050\255\000\000\
\251\254\183\002\153\002\000\000\160\255\000\000\216\255\000\000\
\216\255\000\000\062\255\053\255\254\254\050\255\102\255\102\255\
\050\255\000\000\000\000\086\255\170\002\183\002\000\000\050\255\
\000\000"

let yyrindex = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\095\000\
\001\000\000\000\000\000\000\000\000\000\249\254\000\000\000\000\
\218\001\241\001\009\002\073\000\253\000\000\000\064\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\037\000\
\000\000\000\000\000\000\094\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\002\
\181\000\217\000\109\000\145\000\036\001\072\001\045\002\057\002\
\108\001\069\002\081\002\144\001\000\000\067\255\000\000\000\000\
\000\000\093\002\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\180\001\000\000\000\000\072\255\000\000\069\255\000\000\
\105\002\000\000\066\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\056\255\129\002\196\001\000\000\000\000\
\000\000"

let yygindex = "\000\000\
\003\000\013\000\176\255\021\000\010\000\239\255\008\000\080\000\
\072\000\071\000\000\000"

let yytablesize = 985
let yytable = "\102\000\
\012\000\053\000\102\000\016\000\022\000\099\000\101\000\048\000\
\021\000\103\000\024\000\025\000\026\000\027\000\028\000\029\000\
\018\000\033\000\001\000\083\000\084\000\108\000\022\000\048\000\
\099\000\051\000\048\000\018\000\019\000\056\000\085\000\003\000\
\004\000\050\000\054\000\107\000\050\000\064\000\065\000\066\000\
\067\000\068\000\069\000\070\000\071\000\072\000\073\000\074\000\
\075\000\076\000\083\000\084\000\078\000\086\000\098\000\087\000\
\082\000\048\000\010\000\090\000\091\000\085\000\096\000\093\000\
\105\000\014\000\102\000\015\000\057\000\060\000\010\000\079\000\
\036\000\045\000\045\000\046\000\046\000\003\000\004\000\063\000\
\080\000\095\000\005\000\097\000\086\000\006\000\087\000\081\000\
\106\000\007\000\102\000\010\000\008\000\010\000\055\000\009\000\
\010\000\011\000\012\000\054\000\044\000\004\000\003\000\004\000\
\013\000\109\000\110\000\005\000\024\000\052\000\006\000\014\000\
\030\000\015\000\007\000\042\000\043\000\008\000\045\000\046\000\
\009\000\010\000\011\000\012\000\113\000\111\000\061\000\077\000\
\035\000\013\000\092\000\094\000\036\000\037\000\038\000\039\000\
\014\000\000\000\015\000\042\000\043\000\000\000\045\000\046\000\
\025\000\036\000\037\000\038\000\039\000\040\000\041\000\000\000\
\042\000\043\000\044\000\045\000\046\000\047\000\000\000\000\000\
\000\000\062\000\061\000\000\000\035\000\038\000\039\000\000\000\
\000\000\000\000\042\000\043\000\000\000\045\000\046\000\000\000\
\059\000\035\000\000\000\000\000\023\000\036\000\037\000\038\000\
\039\000\040\000\041\000\000\000\042\000\043\000\044\000\045\000\
\046\000\047\000\036\000\037\000\038\000\039\000\040\000\041\000\
\000\000\042\000\043\000\044\000\045\000\046\000\047\000\035\000\
\000\000\000\000\000\000\000\000\055\000\000\000\000\000\000\000\
\022\000\000\000\000\000\000\000\035\000\000\000\000\000\000\000\
\036\000\037\000\038\000\039\000\040\000\041\000\000\000\042\000\
\043\000\044\000\045\000\046\000\047\000\036\000\037\000\038\000\
\039\000\040\000\041\000\000\000\042\000\043\000\044\000\045\000\
\046\000\047\000\000\000\000\000\021\000\000\000\000\000\000\000\
\000\000\000\000\000\000\012\000\012\000\012\000\000\000\012\000\
\012\000\000\000\012\000\012\000\000\000\000\000\000\000\000\000\
\000\000\012\000\012\000\000\000\000\000\000\000\012\000\012\000\
\012\000\012\000\012\000\012\000\000\000\012\000\012\000\012\000\
\012\000\012\000\012\000\019\000\012\000\000\000\012\000\050\000\
\050\000\050\000\000\000\050\000\050\000\000\000\050\000\050\000\
\000\000\000\000\000\000\000\000\000\000\050\000\050\000\000\000\
\000\000\000\000\050\000\050\000\050\000\050\000\050\000\050\000\
\000\000\050\000\050\000\050\000\050\000\050\000\050\000\020\000\
\050\000\000\000\050\000\036\000\036\000\036\000\000\000\036\000\
\036\000\000\000\036\000\036\000\000\000\000\000\000\000\000\000\
\000\000\036\000\036\000\000\000\000\000\000\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\000\000\000\000\036\000\
\000\000\000\000\036\000\026\000\036\000\000\000\036\000\024\000\
\024\000\024\000\000\000\024\000\024\000\000\000\024\000\024\000\
\000\000\000\000\000\000\000\000\000\000\024\000\024\000\000\000\
\000\000\000\000\024\000\024\000\024\000\024\000\024\000\024\000\
\000\000\000\000\000\000\024\000\000\000\000\000\024\000\029\000\
\024\000\000\000\024\000\025\000\025\000\025\000\000\000\025\000\
\025\000\000\000\025\000\025\000\000\000\000\000\000\000\000\000\
\000\000\025\000\025\000\000\000\000\000\000\000\025\000\025\000\
\025\000\025\000\025\000\025\000\000\000\000\000\000\000\025\000\
\000\000\000\000\025\000\017\000\025\000\000\000\025\000\023\000\
\023\000\023\000\000\000\023\000\023\000\000\000\023\000\023\000\
\000\000\000\000\000\000\018\000\000\000\023\000\023\000\000\000\
\000\000\000\000\023\000\023\000\000\000\000\000\023\000\023\000\
\000\000\000\000\000\000\023\000\000\000\000\000\023\000\000\000\
\023\000\032\000\023\000\022\000\022\000\022\000\000\000\022\000\
\022\000\000\000\022\000\022\000\000\000\000\000\000\000\000\000\
\000\000\022\000\022\000\000\000\000\000\000\000\022\000\022\000\
\033\000\000\000\022\000\022\000\000\000\000\000\000\000\022\000\
\000\000\000\000\022\000\000\000\022\000\000\000\022\000\021\000\
\021\000\021\000\000\000\021\000\021\000\000\000\021\000\021\000\
\034\000\000\000\000\000\000\000\000\000\021\000\021\000\000\000\
\000\000\000\000\000\000\000\000\015\000\000\000\021\000\021\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\021\000\000\000\021\000\000\000\000\000\000\000\019\000\019\000\
\019\000\000\000\019\000\019\000\027\000\019\000\019\000\000\000\
\000\000\000\000\000\000\000\000\019\000\019\000\000\000\000\000\
\028\000\000\000\000\000\000\000\000\000\019\000\019\000\000\000\
\000\000\000\000\000\000\000\000\030\000\000\000\000\000\019\000\
\000\000\019\000\020\000\020\000\020\000\000\000\020\000\020\000\
\031\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
\020\000\020\000\000\000\000\000\013\000\000\000\000\000\000\000\
\000\000\020\000\020\000\000\000\000\000\000\000\000\000\000\000\
\014\000\000\000\000\000\020\000\000\000\020\000\026\000\026\000\
\026\000\000\000\026\000\026\000\000\000\026\000\026\000\000\000\
\000\000\000\000\000\000\000\000\026\000\026\000\000\000\000\000\
\002\000\000\000\000\000\000\000\000\000\026\000\026\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\026\000\
\000\000\026\000\029\000\029\000\029\000\000\000\029\000\029\000\
\000\000\029\000\029\000\036\000\037\000\038\000\039\000\000\000\
\029\000\029\000\042\000\043\000\044\000\045\000\046\000\047\000\
\000\000\029\000\029\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\029\000\017\000\017\000\
\017\000\000\000\017\000\017\000\000\000\017\000\017\000\000\000\
\000\000\000\000\000\000\000\000\017\000\017\000\018\000\018\000\
\018\000\000\000\018\000\018\000\000\000\018\000\018\000\000\000\
\000\000\000\000\000\000\000\000\018\000\018\000\000\000\017\000\
\000\000\017\000\000\000\000\000\032\000\032\000\000\000\000\000\
\032\000\032\000\000\000\032\000\032\000\000\000\000\000\018\000\
\000\000\018\000\032\000\032\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\033\000\033\000\000\000\000\000\033\000\
\033\000\000\000\033\000\033\000\000\000\032\000\000\000\032\000\
\000\000\033\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\034\000\034\000\000\000\000\000\034\000\
\034\000\000\000\034\000\034\000\033\000\000\000\033\000\015\000\
\015\000\034\000\034\000\015\000\015\000\000\000\015\000\015\000\
\000\000\000\000\000\000\000\000\000\000\015\000\015\000\000\000\
\000\000\000\000\000\000\000\000\034\000\000\000\034\000\027\000\
\027\000\000\000\000\000\027\000\027\000\000\000\027\000\027\000\
\015\000\000\000\015\000\028\000\028\000\027\000\027\000\028\000\
\028\000\000\000\028\000\028\000\000\000\000\000\000\000\030\000\
\030\000\028\000\028\000\030\000\030\000\000\000\030\000\030\000\
\027\000\000\000\027\000\031\000\031\000\030\000\030\000\031\000\
\031\000\000\000\031\000\031\000\028\000\000\000\028\000\013\000\
\013\000\031\000\031\000\013\000\013\000\000\000\013\000\013\000\
\030\000\000\000\030\000\014\000\014\000\013\000\013\000\014\000\
\014\000\000\000\014\000\014\000\031\000\000\000\031\000\000\000\
\000\000\014\000\014\000\000\000\000\000\000\000\000\000\000\000\
\013\000\000\000\013\000\002\000\002\000\002\000\035\000\002\000\
\002\000\000\000\002\000\000\000\014\000\000\000\014\000\000\000\
\000\000\002\000\002\000\058\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\035\000\042\000\043\000\
\044\000\045\000\046\000\047\000\002\000\000\000\002\000\000\000\
\000\000\104\000\000\000\000\000\000\000\000\000\036\000\037\000\
\038\000\039\000\040\000\041\000\112\000\042\000\043\000\044\000\
\045\000\046\000\047\000\000\000\000\000\000\000\000\000\036\000\
\037\000\038\000\039\000\040\000\041\000\000\000\042\000\043\000\
\044\000\045\000\046\000\047\000\036\000\037\000\038\000\039\000\
\040\000\041\000\000\000\042\000\043\000\044\000\045\000\046\000\
\047\000"

let yycheck = "\005\001\
\000\000\019\000\005\001\001\000\002\001\086\000\087\000\015\001\
\006\000\015\001\008\000\009\000\010\000\011\000\012\000\013\000\
\002\001\015\000\001\000\001\001\002\001\102\000\002\001\031\001\
\105\000\018\000\017\000\002\001\014\001\022\000\012\001\001\001\
\002\001\031\001\007\001\038\001\000\000\035\000\036\000\037\000\
\038\000\039\000\040\000\041\000\042\000\043\000\044\000\045\000\
\046\000\047\000\001\001\002\001\050\000\035\001\036\001\037\001\
\054\000\048\000\003\001\057\000\058\000\012\001\080\000\061\000\
\003\001\035\001\005\001\037\001\015\001\036\001\015\001\031\001\
\000\000\007\001\008\001\007\001\008\001\001\001\002\001\038\001\
\008\001\079\000\006\001\081\000\035\001\009\001\037\001\007\001\
\036\001\013\001\005\001\036\001\016\001\038\001\000\000\019\001\
\020\001\021\001\022\001\036\001\007\001\036\001\001\001\002\001\
\028\001\103\000\104\000\006\001\000\000\038\001\009\001\035\001\
\036\001\037\001\013\001\029\001\030\001\016\001\032\001\033\001\
\019\001\020\001\021\001\022\001\112\000\105\000\003\001\048\000\
\005\001\028\001\059\000\061\000\022\001\023\001\024\001\025\001\
\035\001\255\255\037\001\029\001\030\001\255\255\032\001\033\001\
\000\000\022\001\023\001\024\001\025\001\026\001\027\001\255\255\
\029\001\030\001\031\001\032\001\033\001\034\001\255\255\255\255\
\255\255\038\001\003\001\255\255\005\001\024\001\025\001\255\255\
\255\255\255\255\029\001\030\001\255\255\032\001\033\001\255\255\
\004\001\005\001\255\255\255\255\000\000\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\005\001\
\255\255\255\255\255\255\255\255\010\001\255\255\255\255\255\255\
\000\000\255\255\255\255\255\255\005\001\255\255\255\255\255\255\
\022\001\023\001\024\001\025\001\026\001\027\001\255\255\029\001\
\030\001\031\001\032\001\033\001\034\001\022\001\023\001\024\001\
\025\001\026\001\027\001\255\255\029\001\030\001\031\001\032\001\
\033\001\034\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\029\001\030\001\031\001\
\032\001\033\001\034\001\000\000\036\001\255\255\038\001\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\029\001\030\001\031\001\032\001\033\001\034\001\000\000\
\036\001\255\255\038\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\000\000\036\001\255\255\038\001\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\255\255\022\001\023\001\024\001\025\001\026\001\027\001\
\255\255\255\255\255\255\031\001\255\255\255\255\034\001\000\000\
\036\001\255\255\038\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\000\000\036\001\255\255\038\001\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\010\001\011\001\
\255\255\255\255\255\255\000\000\255\255\017\001\018\001\255\255\
\255\255\255\255\022\001\023\001\255\255\255\255\026\001\027\001\
\255\255\255\255\255\255\031\001\255\255\255\255\034\001\255\255\
\036\001\000\000\038\001\003\001\004\001\005\001\255\255\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\022\001\023\001\
\000\000\255\255\026\001\027\001\255\255\255\255\255\255\031\001\
\255\255\255\255\034\001\255\255\036\001\255\255\038\001\003\001\
\004\001\005\001\255\255\007\001\008\001\255\255\010\001\011\001\
\000\000\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\026\001\027\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\038\001\255\255\255\255\255\255\003\001\004\001\
\005\001\255\255\007\001\008\001\000\000\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\000\000\255\255\255\255\036\001\
\255\255\038\001\003\001\004\001\005\001\255\255\007\001\008\001\
\000\000\010\001\011\001\255\255\255\255\255\255\255\255\255\255\
\017\001\018\001\255\255\255\255\000\000\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\000\000\255\255\255\255\036\001\255\255\038\001\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\255\255\
\000\000\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\036\001\
\255\255\038\001\003\001\004\001\005\001\255\255\007\001\008\001\
\255\255\010\001\011\001\022\001\023\001\024\001\025\001\255\255\
\017\001\018\001\029\001\030\001\031\001\032\001\033\001\034\001\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\036\001\255\255\038\001\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\003\001\004\001\
\005\001\255\255\007\001\008\001\255\255\010\001\011\001\255\255\
\255\255\255\255\255\255\255\255\017\001\018\001\255\255\036\001\
\255\255\038\001\255\255\255\255\003\001\004\001\255\255\255\255\
\007\001\008\001\255\255\010\001\011\001\255\255\255\255\036\001\
\255\255\038\001\017\001\018\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\010\001\011\001\255\255\036\001\255\255\038\001\
\255\255\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\003\001\004\001\255\255\255\255\007\001\
\008\001\255\255\010\001\011\001\036\001\255\255\038\001\003\001\
\004\001\017\001\018\001\007\001\008\001\255\255\010\001\011\001\
\255\255\255\255\255\255\255\255\255\255\017\001\018\001\255\255\
\255\255\255\255\255\255\255\255\036\001\255\255\038\001\003\001\
\004\001\255\255\255\255\007\001\008\001\255\255\010\001\011\001\
\036\001\255\255\038\001\003\001\004\001\017\001\018\001\007\001\
\008\001\255\255\010\001\011\001\255\255\255\255\255\255\003\001\
\004\001\017\001\018\001\007\001\008\001\255\255\010\001\011\001\
\036\001\255\255\038\001\003\001\004\001\017\001\018\001\007\001\
\008\001\255\255\010\001\011\001\036\001\255\255\038\001\003\001\
\004\001\017\001\018\001\007\001\008\001\255\255\010\001\011\001\
\036\001\255\255\038\001\003\001\004\001\017\001\018\001\007\001\
\008\001\255\255\010\001\011\001\036\001\255\255\038\001\255\255\
\255\255\017\001\018\001\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\038\001\003\001\004\001\005\001\005\001\007\001\
\008\001\255\255\010\001\255\255\036\001\255\255\038\001\255\255\
\255\255\017\001\018\001\018\001\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\005\001\029\001\030\001\
\031\001\032\001\033\001\034\001\036\001\255\255\038\001\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\022\001\023\001\
\024\001\025\001\026\001\027\001\011\001\029\001\030\001\031\001\
\032\001\033\001\034\001\255\255\255\255\255\255\255\255\022\001\
\023\001\024\001\025\001\026\001\027\001\255\255\029\001\030\001\
\031\001\032\001\033\001\034\001\022\001\023\001\024\001\025\001\
\026\001\027\001\255\255\029\001\030\001\031\001\032\001\033\001\
\034\001"

let yynames_const = "\
  COMMA\000\
  SEMI\000\
  CONS\000\
  LET\000\
  IN\000\
  AND\000\
  MATCH\000\
  WITH\000\
  OR\000\
  UNDER\000\
  FUN\000\
  REC\000\
  ARROW\000\
  IF\000\
  ELSE\000\
  THEN\000\
  CAR\000\
  CDR\000\
  ATOM\000\
  MINUS\000\
  PLUS\000\
  TIMES\000\
  DIV\000\
  AND2\000\
  OR2\000\
  NOT\000\
  GT\000\
  GTE\000\
  EQ\000\
  LT\000\
  LTE\000\
  NEQ\000\
  LLIST\000\
  RLIST\000\
  LPAR\000\
  RPAR\000\
  EOF\000\
  UMINUS\000\
  "

let yynames_block = "\
  INT\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 4 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'match_pattern) in
    Obj.repr(
# 45 "parser.mly"
                                        ( (_1, _3)::_5 )
# 480 "parser.ml"
               : 'match_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 46 "parser.mly"
                       ( [(_1, _3)] )
# 488 "parser.ml"
               : 'match_pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'plist) in
    Obj.repr(
# 50 "parser.mly"
                           ( PCons(_1, _3) )
# 496 "parser.ml"
               : 'plist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 51 "parser.mly"
                           ( PCons(_1, PConst 0) )
# 503 "parser.ml"
               : 'plist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 55 "parser.mly"
                           ( PConst _1 )
# 510 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 56 "parser.mly"
                           ( PConst 0 )
# 516 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'plist) in
    Obj.repr(
# 57 "parser.mly"
                           ( _2 )
# 523 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 58 "parser.mly"
                           ( PVar _1 )
# 530 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "parser.mly"
                           ( PAny )
# 536 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'pattern) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'pattern) in
    Obj.repr(
# 60 "parser.mly"
                           ( PCons (_1, _3) )
# 544 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'pattern) in
    Obj.repr(
# 61 "parser.mly"
                           ( _2 )
# 551 "parser.ml"
               : 'pattern))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'u_expr) in
    Obj.repr(
# 65 "parser.mly"
                                       ( _1 )
# 558 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'let_ands) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 66 "parser.mly"
                                       ( ELetIn (_2, _4) )
# 566 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'let_ands) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 67 "parser.mly"
                                       ( ERecIn (_3, _5) )
# 574 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 68 "parser.mly"
                                  ( ECons (_1, _3) )
# 582 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'match_pattern) in
    Obj.repr(
# 69 "parser.mly"
                                  ( EMatch (_2, _4) )
# 590 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'ids) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 70 "parser.mly"
                                  ( EFun (_2, _4) )
# 598 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : Expr.expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 71 "parser.mly"
                                 ( EIf (_2, _4, _6) )
# 607 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 72 "parser.mly"
                            ( EIf (_1, _3, EConst 0) )
# 615 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 73 "parser.mly"
                            ( EIf (_1, EConst 1, _3) )
# 623 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 74 "parser.mly"
                            ( EIf (_2, EConst 0, EConst 1) )
# 630 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 75 "parser.mly"
                            ( EAdd (_1, _3) )
# 638 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 76 "parser.mly"
                            ( ESub (_1, _3) )
# 646 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 77 "parser.mly"
                            ( EMul (_1, _3) )
# 654 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 78 "parser.mly"
                            ( EDiv (_1, _3) )
# 662 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 79 "parser.mly"
                            ( EEq (_1, _3) )
# 670 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 80 "parser.mly"
                            ( EGt (_1, _3) )
# 678 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 81 "parser.mly"
                            ( EGte (_1, _3) )
# 686 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 82 "parser.mly"
                            ( EIf (EEq (_1, _3), EConst 0, EConst 1) )
# 694 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 83 "parser.mly"
                            ( EGte (_3, _1) )
# 702 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 84 "parser.mly"
                            ( EGt (_3, _1) )
# 710 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 85 "parser.mly"
                            ( ECar _2 )
# 717 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 86 "parser.mly"
                            ( ECdr _2 )
# 724 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 87 "parser.mly"
                            ( EAtom _2 )
# 731 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'u_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'u_exprs) in
    Obj.repr(
# 88 "parser.mly"
                            ( EApp (_1, _2) )
# 739 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 89 "parser.mly"
                            ( ESub ((EConst 0), _2) )
# 746 "parser.ml"
               : Expr.expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 93 "parser.mly"
                            ( EConst _1 )
# 753 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Expr.expr) in
    Obj.repr(
# 94 "parser.mly"
                            ( _2 )
# 760 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 95 "parser.mly"
                            ( EVar _1 )
# 767 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 96 "parser.mly"
                            ( EConst 0 )
# 773 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'list) in
    Obj.repr(
# 97 "parser.mly"
                            ( _2 )
# 780 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'tuple) in
    Obj.repr(
# 98 "parser.mly"
                            ( _2 )
# 787 "parser.ml"
               : 'u_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'let_arg_body) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'let_ands) in
    Obj.repr(
# 102 "parser.mly"
                                  ( (_1, _2)::_4 )
# 796 "parser.ml"
               : 'let_ands))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'let_arg_body) in
    Obj.repr(
# 103 "parser.mly"
                                  ( [(_1, _2)] )
# 804 "parser.ml"
               : 'let_ands))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 107 "parser.mly"
                   ( _2 )
# 811 "parser.ml"
               : 'let_arg_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'ids) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 108 "parser.mly"
                   ( EFun (_1, _3) )
# 819 "parser.ml"
               : 'let_arg_body))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'ids) in
    Obj.repr(
# 112 "parser.mly"
           ( _1::_2 )
# 827 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 113 "parser.mly"
           ( [_1] )
# 834 "parser.ml"
               : 'ids))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'u_expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'u_exprs) in
    Obj.repr(
# 117 "parser.mly"
                   ( _1::_2 )
# 842 "parser.ml"
               : 'u_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'u_expr) in
    Obj.repr(
# 118 "parser.mly"
                   ( [_1] )
# 849 "parser.ml"
               : 'u_exprs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'tuple) in
    Obj.repr(
# 122 "parser.mly"
                      ( ECons(_1, _3) )
# 857 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 123 "parser.mly"
                      ( ECons(_1, _3) )
# 865 "parser.ml"
               : 'tuple))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Expr.expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'list) in
    Obj.repr(
# 127 "parser.mly"
                      ( ECons(_1, _3) )
# 873 "parser.ml"
               : 'list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Expr.expr) in
    Obj.repr(
# 128 "parser.mly"
                      ( ECons(_1, EConst 0) )
# 880 "parser.ml"
               : 'list))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Expr.expr)
;;
