#define direction int 0
#define lam_pos int 1
#define lam2_pos int 2
#define my_id int 3
#define ghost_start_axis int 4
#define ghost_axis int 5
#define ghost_status int 6
#define floor int 7

#define LAM_POS_X [100]
#define LAM_POS_Y [101]
#define LAM2_POS_X [102]
#define LAM2_POS_Y [103]

#define POS_X [104]
#define POS_Y [105]
#define DIRECTION [106]
#define VITALITY [107]
#define DIST_X [108]
#define DIST_Y [109]
#define DIST_X_2 [110]
#define DIST_Y_2 [111]
#define FLOOR_START_MEMORY 112
#define UP [112]
#define RIGHT [113]
#define DOWN [114]
#define LEFT [115]
#define BRANCH [116]

#define RADIUS 5



@my_id
@ghost_status
mov @VITALITY,a
mov @DIRECTION,b
inc [b] ; 今まで行った方向++;
mov h,b ; debug


;; 自分の座標を知る
; 自分のindex
@my_id
; 座標 i
@ghost_axis
; 代入
mov @POS_X,a
mov @POS_Y,b

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;3叉路以上か;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
mov @BRANCH, 0
;;上
mov a,@POS_Y
mov b,@POS_X
dec a
@floor ; a = 床の値
mov @UP,a

jeq @next_up, @UP,0
	inc @BRANCH
:next_up

;;右
mov a, @POS_Y
mov b, @POS_X
inc b
@floor ; a = 床の値
mov @RIGHT, a

jeq @next_right, @RIGHT,0
	inc @BRANCH
:next_right

;;下
mov a, @POS_Y
mov b, @POS_X
inc a
@floor ; a = 床の値
mov @DOWN, a

jeq @next_down, @DOWN, 0
	inc @BRANCH
:next_down

;;左
mov a, @POS_Y
mov b, @POS_X
dec b
@floor ; a = 床の値
mov @LEFT, a

jeq @next_left,@LEFT,0
	inc @BRANCH
:next_left



;;;;;;;;;3叉路以下;;;;;;;;;;;;
jlt @random_work, @BRANCH, 3
mov a, @BRANCH
int 8 

;;;;;;;;;行ける方向;;;;;;;;;;;;
mov g, 0;; i
mov c, 0;; max
mov d, 0;; max direction

:start_cp
mov e, @FLOOR_START_MEMORY ;;floor memory
jgt @end_calc_priority, g, 3
	jeq @pass_cp, @DIRECTION, g ; 同じ方向以外なら
		;; floor

		jgt @pass_up, c, [e] ;; max更新
			mov c, [e]
			mov d, g
		:pass_up
	:pass_cp
	inc g
	inc e
jlt @start_cp, g, 3
:end_calc_priority

mov a, d
@direction
jeq @fin, 0, 0








; ;; 敵の座標を知る
; @lam_pos
; mov @LAM_POS_X,a
; mov @LAM_POS_Y,b


; ;;敵との差を知る
; jlt @else_gt_x, @LAM_POS_X, @POS_X
; mov a, @LAM_POS_X
; sub a, @POS_X
; jeq @end_gt_x, 0, 0
; :else_gt_x
; mov a, @POS_X
; sub a, @LAM_POS_X
; :end_gt_x
; mov @DIST_X, a

; jlt @else_gt_y, @LAM_POS_Y, @POS_Y
; mov a, @LAM_POS_Y
; sub a, @POS_Y
; jeq @end_gt_y, 0, 0
; :else_gt_y
; mov a, @POS_Y
; sub a, @LAM_POS_Y
; :end_gt_y
; mov @DIST_Y, a



; mov a, @DIST_X ;とりあえずいれて
; mov b, @DIST_Y

; sub a, @POS_X
; sub b, @POS_Y

; mov @DIST_X, a ;Distが決まる
; mov @DIST_Y, b

; ;; default ai
:random_work
mov e, 255 ;; set max
mov f, 0
mov g, 255


:loop
inc g
jgt @end_if, [g], e
	mov e, [g] ;; minimumの更新
	mov f, g ;;minumumの方向

:end_if
jlt @loop,g,3 ;;cが3以下ならループ

mov a,f ;; aにdirectionを入れる
@direction

:end_haba_if

; mov a, [0]
; mov b, [1]
; mov c, [2]
; mov d, [3]
; int 8

:fin

hlt