#define direction int 0
#define lam_pos int 1
#define lam2_pos int 2
#define my_id int 3
#define ghost_start_axis int 4
#define ghost_axis int 5
#define ghost_status int 6
#define floor int 7
#define STACK_SIZE 100
#define STALKER_MODE [254]
#define POINTER [255]

#define LAM2_POS_X [202]
#define LAM2_POS_Y [203]
#define POS_X [204]
#define POS_Y [205]
#define DIRECTION [206]
#define VITALITY [207]
#define DIST_X [208]
#define DIST_Y [209]
#define DIST_X_2 [210]
#define DIST_Y_2 [211]
#define FLOOR_START_MEMORY 212
#define UP [212]
#define RIGHT [213]
#define DOWN [214]
#define LEFT [215]
#define BRANCH [216]
#define TURN [217]
#define IS_RIGHT [218]
#define IS_DOWN [219]
#define BRANCH_STACK_START 220
#define BRANCH_1_X [221]
#define BRANCH_1_Y [222]
#define BRANCH_1_D [223]
#define BRANCH_2_X [224]
#define BRANCH_2_Y [225]
#define BRANCH_2_D [226]
#define LAM_POS_X [227]
#define LAM_POS_Y [228]
#define DIRECTION_START 230
#define DIRECTION_ALLOWED [230]

;; 234

;;;; TURN RESET ;;;;
; TODO

;;;;;;;過去の方向;;;;;;;
  @my_id
  @ghost_status
  mov @VITALITY,a
  mov @DIRECTION,b
  inc [b] ; 今まで行った方向++;

;;;;;自分の座標を知る;;;;
  @my_id
  @ghost_axis
  mov @POS_X, a
  mov @POS_Y, b

;;;;;Count Branch;;;;;;
  mov @BRANCH, 0
  mov [230], 0
  mov [231], 0
  mov [232], 0
  mov [233], 0

  mov g, 0 ;; i
  mov f, @FLOOR_START_MEMORY

  ;; FOR
  :start_up3
  jgt @end_up3, g, 3
    ;;初期化
      mov a,@POS_X
      mov b,@POS_Y

    ;;SWICH 方向
      jeq @s0, g, 0 
      jeq @s1, g, 1
      jeq @s2, g, 2
      jeq @s3, g, 3

      :s0
        dec b
        jeq @end_up3swich, 0, 0
      :s1
        inc a
        jeq @end_up3swich, 0, 0
      :s2
        inc b
        jeq @end_up3swich, 0, 0
      :s3
        dec a
        jeq @end_up3swich, 0, 0
      :end_up3swich
  
    ;; START regist floor
      ;; if 敵のポジション
        jeq @equal_x, a, @LAM_POS_X
          jeq @not_lamda_pos, 0, 0
          :equal_x
          jeq @equal_xy, b, @LAM_POS_Y
            jeq @not_lamda_pos, 0, 0
            :equal_xy
              mov [f], 7
              jeq @regist_floor, 0, 0

        :not_lamda_pos
      ;; そうじゃなければ
        @floor ;; a = a, bの床情報を
        mov [f], a ;;床情報を入れる
        jlt @regist_floor, a, 5 ; 5以上なら、空判定
          mov a, 1

      :regist_floor

    ;; その方向にすすめるか
    jlt @end_count_branch, [f], 1
      ;; 進める方向のフラグを1に
      mov a, @DIRECTION_START
      add a, g
      mov [a], 1
      inc @BRANCH
    :end_count_branch
    
    inc g
    inc f
  jlt @start_up3, g, 4
  :end_up3

  ;debug  g,f : used
  ; mov a, 77
  ; mov b, @UP
  ; mov c, @RIGHT
  ; mov d, @DOWN
  ; mov e, @LEFT
  ; mov h, @BRANCH
  ; int 8


;;BRANCHじゃなければ終了;;
  jlt @fin, @BRANCH, 3

;;;;;;; 敵の座標を知る ;;;;;;;;
  @lam_pos
  mov @LAM_POS_X, a
  mov @LAM_POS_Y, b

;;;;;;; 敵の位置を登録 ;;;;;;;;
  mov f, @POINTER
  mov [f], @LAM_POS_X

  mov f, @POINTER
  add f, @STACK_SIZE
  mov [f], @LAM_POS_Y
  ; debug
  ; mov a, @POINTER
  ; mov a, [a]
  ; mov b, @STACK_SIZE
  ; add b, @POINTER
  ; mov b, [b]

  ; mov h, @POINTER
  ; int 8

  ;; ポインタ++ ;;
  inc @POINTER


  ;; if @pointer > @STACK_SIZE 
  ; jlt @registed, @POINTER, @STACK_SIZE
  ;   mov a, 0
  ;   mov b, 1 ;; 好きなサイズにしてね☆
  ;   mov c, @STACK_SIZE
  ;   mov d, c
  ;   inc d
  ;   :start_shift
  ;     mov [b], [a]
  ;     mov [d], [c]
  ;     inc a
  ;     inc b
  ;     inc c
  ;     inc d

  ;   jlt @start_shift, b, @STACK_SIZE

  ; :registed

;;;;;;; ショートカット ;;;;;;;
  mov a, 0
  mov b, @STACK_SIZE
  mov f, @STACK_SIZE ;;TODO ここ減らせる
  sub f, 1

  :start_shortcut
    jgt @repeat_shortcut, [a], @LAM_POS_X
      jlt @repeat_shortcut, [a], @LAM_POS_X
        jgt @repeat_shortcut, [b], @LAM_POS_Y
          jlt @repeat_shortcut, [b], @LAM_POS_Y
            mov @POINTER, a
            jeq @end_shortcut, 0, 0



    :repeat_shortcut
    jlt @start_shortcut, a, @POINTER
  :end_shortcut




   




;;;;;; 敵の位置 1:True ;;;;;;;
  ;; 右に敵がいるか;;

    ; if LAM_POS_X <= posX
    jgt @gt_lambda_x, @LAM_POS_X, @POS_X
      ; if LAM_POS_X < posX
      jeq @eq_lambda_x, @LAM_POS_X, @POS_X
        mov @IS_RIGHT, 0
        jeq @end_gt_lambda_x, 0, 0
      ; elif LAM_POS_X == posX
      :eq_lambda_x 
        mov @IS_RIGHT, 1
        jeq @end_gt_lambda_x, 0, 0
    ; elif LAM_POS_X > POS_X
    :gt_lambda_x
      mov @IS_RIGHT, 2
    :end_gt_lambda_x

  ;; 下に敵がいるか;;
    jgt @gt_lambda_y, @LAM_POS_Y, @POS_Y
      jeq @eq_lambda_y, @LAM_POS_Y, @POS_Y
        mov @IS_DOWN, 0
        jeq @end_gt_lambda_y, 0, 0
      :eq_lambda_y
        mov @IS_DOWN, 1
        jeq @end_gt_lambda_y, 0, 0
    :gt_lambda_y
      mov @IS_DOWN, 2
    :end_gt_lambda_y

  ;; debug
  ; mov a, 111
  ; mov b, @IS_RIGHT
  ; mov c, @IS_DOWN
  ; mov d, 0
  ; int 8

;;;;;;;; 袋小路脱出 ;;;;;;;;;;;
  jlt @not_dead_end, @BRANCH_2_X, @BRANCH_1_X
    jgt @not_dead_end, @BRANCH_2_X, @BRANCH_1_X
      jlt @not_dead_end, @BRANCH_2_Y, @BRANCH_1_Y
        jgt @not_dead_end, @BRANCH_2_Y, @BRANCH_1_Y
          jlt @not_dead_end, @POS_X, @BRANCH_1_X
            jgt @not_dead_end, @POS_X, @BRANCH_1_X
              jlt @not_dead_end, @POS_Y, @BRANCH_1_Y
                jgt @not_dead_end, @POS_Y, @BRANCH_1_Y
                  mov a, @DIRECTION_START
                  add a, @BRANCH_2_D
                  mov [a], 0
                  mov a, @DIRECTION_START
                  add a, @BRANCH_1_D
                  mov [a], 0

                  ;; DEBUG
                  ; mov a, [230]
                  ; mov b, [231]
                  ; mov c, [232]
                  ; mov d, [233]
                  ; mov e, 0
                  ; mov f, 0
                  ; mov g, 0
                  ; mov h, @BRANCH
                  ; int 8
                  
                  mov a, @DIRECTION_START
                  :start_dead
                  jeq @end_dead, [a], 0
                    sub a, @DIRECTION_START
                    @direction
                    jeq @fin, 0, 0
                  :end_dead
                  inc a
                  jlt @start_dead, a, 134

  :not_dead_end

;;;;;;;;;行ける方向;;;;;;;;;;;;
  mov c, 0;; max
  mov d, 0;; max direction

  mov e, 0 ;;方向の優先度
  mov f, @FLOOR_START_MEMORY ;floor
  mov g, 0;; i


  :start_calc_priority
  jgt @end_calc_priority, g, 3
    mov a, 2
    xor a, @DIRECTION
    jeq @pass_calc_priority, a, g ; 戻らないなら
      mov a, [f]
      ;; if maximum <= floor_value:
      jgt @pass_up, c, a   

        ;;SWICH 方向の優先度
          mov b, 2
          jeq @p0, g, 0
          jeq @p1, g, 1
          jeq @p2, g, 2
          jeq @p3, g, 3

          :p0 ;;上
            sub b, @IS_DOWN
            jeq @end_p_swich, 0, 0
          :p1 ;; 右
            mov b, @IS_RIGHT 
            jeq @end_p_swich, 0, 0
          :p2 ;; 下
            mov b, @IS_DOWN
            jeq @end_p_swich, 0, 0
          :p3 ;; 左
            sub b, @IS_RIGHT
            jeq @end_p_swich, 0, 0
          :end_p_swich

        ;; if maxi < floor value
        ;; TODO:下のブロックと最適化
          jeq @eq_priority, c, a
            mov c, a
            mov d, g
            mov e, b
            
            jeq @pass_up, 0, 0

          ;; elif maxi == floor value
          :eq_priority
            jgt @updata_priority, b, e
              jeq @pass_up, 0, 0
              :updata_priority
              mov d, g
              mov e, b
      :pass_up
    :pass_calc_priority
    inc g
    inc f
  jlt @start_calc_priority, g, 4
  :end_calc_priority

  mov a, d
  @direction

  mov d, a
;;;;;;;BRANCH登録;;;;;;;
  ;; 1つ前を2つ前に
  mov @BRANCH_2_X, @BRANCH_1_X
  mov @BRANCH_2_Y, @BRANCH_1_Y
  mov @BRANCH_2_D, @BRANCH_1_D

  @my_id
  @ghost_axis

  mov @BRANCH_1_X, a
  mov @BRANCH_1_Y, b
  mov @BRANCH_1_D, d

  ; mov a, @BRANCH_2_X
  ; mov b, @BRANCH_2_Y
  ; mov c, @BRANCH_2_D
  ; mov d, 0
  ; mov e, @BRANCH_1_X
  ; mov f, @BRANCH_1_Y
  ; mov g, @BRANCH_1_D
  ; mov h, @BRANCH
  ; int 8


jeq @fin, 0, 0 ;終了


;; STALKER_MODE
  :stakler_mode




:fin

hlt


